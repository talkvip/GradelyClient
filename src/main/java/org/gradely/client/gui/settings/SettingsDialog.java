/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package org.gradely.client.gui.settings;

import java.awt.Component;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.MutableTreeNode;
import javax.swing.tree.TreeSelectionModel;
import org.gradely.client.FileLocationEnum;
import org.gradely.client.FilePath;
import org.gradely.client.gui.PanelAbstractClass;
import org.gradely.client.gui.UserPanel;

/**
 * Displays the Main Settings Window and all that other junk.
 * @author Matt
 */
public class SettingsDialog {

    //================= Fields =================================
    
    //================= Constructors ===========================

    public SettingsDialog() {

    }

    //================= Methods ================================
    
    /**
     * Actually displays the settings window.
     */
    public void init() {
        //Whole Frame
        JFrame omnies = new JFrame(org.gradely.client.config.Constants.formalAppName);
        
        //Top Side 
        JLabel topImage = new javax.swing.JLabel();
        topImage.setText("");
        topImage.setIcon(new ImageIcon(new FilePath("icons/settings-top.png", FileLocationEnum.INSTALL).getAbsolutePath()));
        
        
        //JTree left side settings selector 
        //======================================================================================
        JTree left = new JTree(settingsPanels());
        left.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION); // Allows for only one tree item to be selected at a time
        left.addTreeSelectionListener(null);
        left.setCellRenderer(new SettingsTreeCellRenderer());
        left.setRootVisible(false);

        // Expand all
        for (int i = 0; i < left.getRowCount(); i++) {
            left.expandRow(i);
        }

        //Right Side
        //=====================================================================================
        //To create the right side we load a JPanel from elsewhere
        PanelAbstractClass right = new UserPanel();
        right.loadForms();

        
        //We need a Scroll Panel for the left side
        //======================================================================================
        JScrollPane leftScroll = new JScrollPane();
        
        //Need a split panel to seperate the left and right sides
        //======================================================================================
        JSplitPane splitter = new JSplitPane();
        
        
        //Put it all togeather
        //======================================================================================
        GroupLayout layout = new GroupLayout(omnies);
        
        //This code was generated by the NetBeans GUI WYSIWYG
        omnies.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 506, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 365, Short.MAX_VALUE)
        );

        splitter.setRightComponent(omnies);

        leftScroll.setViewportView(left);

        splitter.setLeftComponent(leftScroll);

        javax.swing.GroupLayout subLayout = new javax.swing.GroupLayout(omnies.getContentPane()); //omnies?
        omnies.getContentPane().setLayout(subLayout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(splitter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 587, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(topImage, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(splitter))
        );

        omnies.pack();
        omnies.setVisible(true);

    }
    
    /**
     * Creates a tree model for the left side options and selectors. Each option of the tree corisponds with a JPanel
     * @return a mutable tree node for a JTree
     */
    private MutableTreeNode settingsPanels()
    {
        DefaultMutableTreeNode root = new DefaultMutableTreeNode();
        
        //TODO icon icons/usericon.png
        //User Settings
        DefaultMutableTreeNode user = new DefaultMutableTreeNode(new TreeItem("User and Server Settings", new FilePath("icons/usericon.png", FileLocationEnum.INSTALL)));
        root.add(user);
        
        //TODO icon icons/servericon.png
        //Server Settings
        String appName = org.gradely.client.config.Constants.formalAppName;
        //DefaultMutableTreeNode server = new DefaultMutableTreeNode(new TreeItem(appName+" Server", new FilePath("icons/servericon.png", FileLocationEnum.INSTALL)));
        //root.add(server);
        
        //TODO icon icons/appicon.png
        //Application Settings
        DefaultMutableTreeNode appSettings = new DefaultMutableTreeNode(new TreeItem("Directory Settings", new FilePath("icons/appicon.png", FileLocationEnum.INSTALL)));
        root.add(appSettings);
        
        //File Transfer Settings
        //DefaultMutableTreeNode fileTransfer = new DefaultMutableTreeNode(new TreeItem("File Storage", new FilePath("filestorageicon.png", FileLocationEnum.INSTALL)));
        //root.add(fileTransfer);
        
        return root;
    }
    
    
    
    /**
    * This renders the left-side tree into the appropriate form.
    * @see http://download.oracle.com/javase/tutorial/uiswing/examples/components/TreeIconDemo2Project/src/components/TreeIconDemo2.java
    */
    private class SettingsTreeCellRenderer extends DefaultTreeCellRenderer {

        public SettingsTreeCellRenderer() {
            super();

            setBorderSelectionColor(null);
        }

        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value,
                boolean sel, boolean expanded, boolean leaf, int row, boolean hasFocus) {

            Component origComp = super.getTreeCellRendererComponent(tree, value, sel, expanded, leaf, row, hasFocus);

            if (!(value instanceof DefaultMutableTreeNode)) {
                return origComp;
            }

            Object userObj = ((DefaultMutableTreeNode) value).getUserObject();

            if (!(userObj instanceof TreeItem)) {
                return origComp;
            }
            
            TreeItem ti = (TreeItem)userObj;

            setIcon(new ImageIcon(ti.getIconFilePath().getAbsolutePath()));
            return this;
        }
    }
    
    /**
     * Replaces the right side panel with a new panel. 
     * @param panel 
     */
    public static void changeRightPanel(PanelAbstractClass panel)
    {
        //TODO changeRightPanel
    }

    
    //------------------ Getters and Setters -------------------
}
